<?xml version = '1.0' encoding = 'utf-8'?> 

<project name="MHAP" default="main" basedir=".">
	
  <!-- ========== Component Declarations ==================================== -->

    <property name="component.version"       value="1.5v5"/>

    <!-- The name of this component -->
    <property name="copyright.name"          value="Konstantin Berlin and Sergey Koren"/>

    <!-- The name of this component -->
    <property name="component.name"          value="mhap"/>

    <!-- The primary package name of this component -->
    <property name="component.package"       value="edu.umd.marbl.mhap"/>

    <!-- The title of this component -->
    <property name="component.title"         value="MHAP"/>

    <!-- The base directory for component sources -->
    <property name="source.home"             value="src/main/java"/>

    <!-- The base directory for component resources -->
    <property name="source.resources"        value="src/main/resources"/>

    <!-- The base directory for opencl files -->
    <property name="source.opencl"        value="src/main/opencl"/>

    <!-- The base directory for matlab files -->
    <property name="source.matlab"        value="src/main/matlab"/>

    <!-- The base directory for cc files -->
    <property name="source.cc"        value="src/main/cc"/>

    <!-- The base directory for unit test sources -->
    <property name="test.home"               value="src/test/java"/>

    <!-- The base directory for unit test resources -->
    <property name="test.resources"          value="src/test/resources"/>

    <!-- The base directory for compilation targets -->
    <property name="build.home"              value="target"/>

    <!-- The base directory for distribution targets -->
    <property name="dist.home"               value="${build.home}/dist"/>

    <!-- The directory for library containing the dependency jar files -->
    <property name="lib.dir"               value="lib"/>

    <!-- The directory that contains the binary files -->
    <property name="bin.dir"               value="bin"/>

    <!-- The base directory for test reports -->
    <property name="test.reports"            value="${build.home}/test-reports"/>

    <!-- Base file name for dist files -->
    <property name="final.name"              value="${component.name}-${component.version}"/>

    <!-- Directory where binary release files are staged -->
    <property name="stage.bin.dir"           value="${dist.home}/stage-bin"/>

    <!-- Directory where source release files are staged -->
    <property name="stage.src.dir"           value="${dist.home}/stage-src"/>

  <!-- ========== Compiler Defaults ========================================= -->

    <!-- Should Java compilations set the 'debug' compiler option? -->
    <property name="compile.debug"           value="false"/>

    <!-- Should Java compilations set the 'deprecation' compiler option? -->
    <property name="compile.deprecation"     value="false"/>

    <!-- Should Java compilations set the 'optimize' compiler option? -->
    <property name="compile.optimize"        value="true"/>
      
    <!-- JDK level -->
    <property name="compile.source"          value="1.8"/>
    <property name="compile.target"          value="1.8"/>

    <!-- Base compile classpath -->
  
   <!-- Generate path for binary distrubtion dependencies -->
   <path id="compile.classpath">
     <fileset dir="${lib.dir}" includes="**/*.jar"/>
     <pathelement location="${build.home}/classes"/>
   </path>

  <!-- ========== Test Execution Defaults =================================== -->


    <!-- Construct unit test classpath -->
    <path id="test.classpath">
      <fileset dir="${lib.dir}" includes="**/*.jar"/>
      <pathelement location="${build.home}/classes"/>
      <pathelement location="${build.home}/test-classes"/>
      <pathelement location="${junit.jar}"/>
    </path>

    <!-- Should the build fail if there are test failures? -->
    <property name="test.failonerror"        value="false"/>

  <!-- ========== Executable Targets ======================================== -->

    <target name="clean" description="Clean build and distribution directories">
      <delete    dir="${build.home}"/>
    </target>


    <target name="init"
     description="Initialize and evaluate conditionals">
      <echo message="-------- ${component.title} ${component.version} --------"/>
      <filter  token="name"                  value="${component.name}"/>
      <filter  token="package"               value="${component.package}"/>
      <filter  token="version"               value="${component.version}"/>
      <filter  token="compilesource"         value="${compile.source}"/>
      <filter  token="compiletarget"         value="${compile.target}"/>
      <tstamp/>
      <mkdir dir="${build.home}"/>
      <mkdir dir="${build.home}/classes"/>
      <mkdir dir="${build.home}/classes/${bin.dir}"/>
      <mkdir dir="${build.home}/classes/properties"/>
      <mkdir dir="${build.home}/test-classes"/>
      <copy todir="${build.home}/classes/">
         <fileset dir="${source.resources}" />
      </copy>
    </target>
  
  <!-- ========== Build Info File =========================================== -->
  <target name="buildinfo">
      <tstamp>
          <format property="builtat" pattern="MM/dd/yyyy hh:mm aa" timezone="America/New_York"/>
      </tstamp>        

      <propertyfile file="${build.home}/classes/properties/mhap.properties"
          comment="This file is automatically generated - DO NOT EDIT">        
          <entry key="buildtime" value="${builtat}"/>
          <entry key="builder" value="${whoami}"/>
          <entry key="component.version" value="${component.version}"/>
          <entry key="system" value="${buildsystem}"/>
      </propertyfile>
  </target>

  <!-- ========== Compile Targets =========================================== -->

    <target name="compile" depends="init,copy-lib,buildinfo" description="Compile">

      <javac  srcdir="${source.home}"
             destdir="${build.home}/classes"
               source="${compile.source}"
               target="${compile.target}"
               debug="${compile.debug}"
         deprecation="${compile.deprecation}"
   includeantruntime="false"
            optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
      </javac>
    </target>


  <!-- ========== Unit Test Targets ========================================= -->

    <target name="compile.tests" depends="compile" description="Compile unit tests.">

      <javac srcdir="${test.home}"
             destdir="${build.home}/test-classes"
             source="${compile.source}"
             target="${compile.target}"
             debug="${compile.debug}"
             deprecation="${compile.deprecation}"
             includeantruntime="false"
             optimize="${compile.optimize}">
          <classpath refid="test.classpath"/>
      </javac>
    
      <copy todir="${build.home}/test-classes">
          <fileset dir="${test.resources}">
          </fileset>
      </copy>
     
       <copy todir="${build.home}">
         <fileset dir="${source.matlab}" />
      </copy>

    </target>

  <target name="test"  depends="compile.tests"
                       description="Run unit tests">
      <mkdir dir="${test.reports}"/>
      <junit printsummary="true"
               errorProperty="test.failed"
               failureProperty="test.failed"
               fork="true"
               showOutput="true">
               <formatter type="plain"/>
               <classpath refid="test.classpath"/>
               <!-- If test.entry is defined, run a single test, otherwise run all valid tests -->
               <!-- N.B. test.entry must be the full path to the test class, for example:
               -->
               <test name="${test.entry}" todir="${test.reports}" if="test.entry"/>
               <batchtest todir="${test.reports}" unless="test.entry">
                   <fileset dir="${test.home}">
                      <include name="**/*Test.java"/> 
                   </fileset>
               </batchtest>
       </junit>
       <fail message="There were test failures.">
           <condition>
               <and>
                   <istrue value="${test.failonerror}"/>
                   <isset property="test.failed"/>
               </and>
           </condition>
     </fail>
  </target>



  <!-- ========== Produce JavaDocs ========================================== -->

    <target name="javadoc" depends="compile" description="Create component Javadoc documentation">
      <mkdir dir="${build.home}/apidocs"/>
      <tstamp>
          <format property="current.year" pattern="yyyy"/>
      </tstamp>
      <javadoc sourcepath="${source.home}"
                  destdir="${build.home}/apidocs"
             packagenames="edu.umd.umiacs.armor.*"
                   author="true"
                  private="true"
                  version="true"
                 doctitle="&lt;h1&gt;${component.title} ${}&lt;/h1&gt;"
              windowtitle="${component.title} ${}"
                   bottom="Copyright (c) 2011-${current.year} ${copyright.name}"
             classpathref="compile.classpath">
          <link href="http://java.sun.com/j2se/1.6.0/docs/api/"/>  
      </javadoc>
    </target>


  <!-- ========== Create Jar ================================================ -->

    <target name="jar" depends="compile" description="Create jar file">

      <copy file="LICENSE.txt" tofile="${build.home}/classes/META-INF/LICENSE.txt"/>
      <copy file="NOTICE.txt"  tofile="${build.home}/classes/META-INF/NOTICE.txt"/>

      <manifest file="${build.home}/MANIFEST.MF">
          <attribute name="Specification-Title"      value="${component.title}"/>
          <attribute name="Specification-Version"    value="${}"/>
          <attribute name="Specification-Vendor"     value="${copyright.name}"/>
          <attribute name="Implementation-Title"     value="${component.title}"/>
          <attribute name="Implementation-Version"   value="${}"/> 
          <attribute name="Implementation-Vendor"    value="${copyright.name}"/>
          <attribute name="Implementation-Vendor-Id" value=""/>
          <attribute name="X-Compile-Source-JDK"     value="${compile.source}"/>
          <attribute name="X-Compile-Target-JDK"     value="${compile.target}"/>
      </manifest>

      <jar jarfile="${build.home}/${final.name}.jar"
           basedir="${build.home}/classes"
          manifest="${build.home}/MANIFEST.MF"/>
    </target>


  <!-- ========== Distribution Target =========================================== -->

    <target name="dist" depends="clean,jar,javadoc" description="Create distribution artifacts">

      <mkdir dir="${dist.home}"/>

      <!-- jar(s) -->
      <copy todir="${dist.home}">
        <fileset dir=".">
          <include name="RELEASE-NOTES.txt"/>
        </fileset>
        <fileset dir="${build.home}">
          <include name="*.jar"/>
        </fileset>
      </copy>

      <!-- Binary Distro -->
      <mkdir dir="${stage.bin.dir}/${final.name}"/>
      <copy todir="${stage.bin.dir}/${final.name}">
        <fileset dir=".">
          <include name="LICENSE.txt"/>
          <include name="NOTICE.txt"/>
        </fileset>
        <fileset dir="${build.home}">
          <include name="*.jar"/>
        </fileset>
      </copy>
      <copy todir="${stage.bin.dir}/${final.name}/apidocs">
        <fileset dir="${build.home}/apidocs" />
      </copy>

      <!-- Source Distro -->
      <mkdir dir="${stage.src.dir}/${final.name}-src"/>
      <copy todir="${stage.src.dir}/${final.name}-src">
        <fileset dir=".">
          <include name="*.xml"/>
          <include name="*.txt"/>
          <include name="*.html"/>
        </fileset>
      </copy>
      <copy todir="${stage.src.dir}/${final.name}-src/src">
        <fileset dir="src" excludes="mantissa/**,experimental/**" />
      </copy>
      <zip  zipfile="${dist.home}/${final.name}.zip"     basedir="${stage.bin.dir}"/>
      <zip  zipfile="${dist.home}/${final.name}-src.zip" basedir="${stage.src.dir}"/>
      <tar  tarfile="${dist.home}/${final.name}.tar"     basedir="${stage.bin.dir}" longfile="gnu"/>
      <tar  tarfile="${dist.home}/${final.name}-src.tar" basedir="${stage.src.dir}" longfile="gnu"/>
      <gzip     src="${dist.home}/${final.name}.tar"     zipfile="${dist.home}/${final.name}.tar.gz"/>
      <gzip     src="${dist.home}/${final.name}-src.tar" zipfile="${dist.home}/${final.name}-src.tar.gz"/>

      <!-- clean up staging directories -->
      <delete    dir="${stage.bin.dir}"/>
      <delete    dir="${stage.src.dir}"/>

    </target>
  
  <property name="params" value=""/>
  <property name="javac.exe" value="javac"/>
  <property name="java.exe" value="java"/>

  <target name="copy-lib">
    <mkdir dir="${build.home}/${lib.dir}"/>
    <copy todir="${build.home}/${lib.dir}">
        <fileset dir="${lib.dir}"/>
    </copy>
  </target>
  
  <path id="dep.runtime">
      <fileset dir="./${lib.dir}">
          <include name="**/*.jar" />
      </fileset>
  </path>
  <property name="dep_cp" value="${toString:dep.runtime}" />
 
  <target name="main" depends="jar-mhap">
  </target>

  <target name="jar-mhap" depends="clean,compile">
  
    <copy file="LICENSE.txt" tofile="${build.home}/classes/META-INF/LICENSE.txt"/>
    <copy file="NOTICE.txt"  tofile="${build.home}/classes/META-INF/NOTICE.txt"/>
    
    <manifestclasspath property="lib.list" jarfile="mhap-${component.version}.jar">
        <classpath refid="compile.classpath"/>
    </manifestclasspath>
    
    <manifest file="${build.home}/MANIFEST.MF">
        <attribute name="Specification-Title"      value="${component.title}"/>
        <attribute name="Specification-Version"    value="${}"/>
        <attribute name="Specification-Vendor"     value="${copyright.name}"/>
        <attribute name="Implementation-Title"     value="${component.title}"/>
        <attribute name="Implementation-Version"   value="${}"/> 
        <attribute name="Implementation-Vendor"    value="${copyright.name}"/>
        <attribute name="Implementation-Vendor-Id" value=""/>
        <attribute name="X-Compile-Source-JDK"     value="${compile.source}"/>
        <attribute name="X-Compile-Target-JDK"     value="${compile.target}"/>
        <attribute name="Main-Class" value="edu.umd.marbl.mhap.main.MhapMain" />
        <attribute name="Class-Path" value="${lib.list}" />
    </manifest>
    
    <jar jarfile="${build.home}/mhap-${component.version}.jar"
          basedir="${build.home}/classes"
         manifest="${build.home}/MANIFEST.MF"/>

    <tar destfile="${build.home}/mhap-${component.version}.tar"
         basedir="${build.home}"
      includes="${lib.dir}/**, mhap-${component.version}.jar"
    />
    
  </target>
  
  <target name="jar-directalign" depends="compile">

    <copy file="LICENSE.txt" tofile="${build.home}/classes/META-INF/LICENSE.txt"/>
    <copy file="NOTICE.txt"  tofile="${build.home}/classes/META-INF/NOTICE.txt"/>
    
    <manifestclasspath property="lib.list" jarfile="direct-align-${component.version}.jar">
        <classpath refid="compile.classpath"/>
    </manifestclasspath>
    
    <manifest file="${build.home}/MANIFEST.MF">
        <attribute name="Specification-Title"      value="${component.title}"/>
        <attribute name="Specification-Version"    value="${}"/>
        <attribute name="Specification-Vendor"     value="${copyright.name}"/>
        <attribute name="Implementation-Title"     value="${component.title}"/>
        <attribute name="Implementation-Version"   value="${}"/> 
        <attribute name="Implementation-Vendor"    value="${copyright.name}"/>
        <attribute name="Implementation-Vendor-Id" value=""/>
        <attribute name="X-Compile-Source-JDK"     value="${compile.source}"/>
        <attribute name="X-Compile-Target-JDK"     value="${compile.target}"/>
        <attribute name="Main-Class" value="edu.umd.marbl.mhap.main.DirectAlignMain" />
        <attribute name="Class-Path" value="${lib.list}" />
    </manifest>
    
    <jar jarfile="${build.home}/direct-align-${component.version}.jar"
          basedir="${build.home}/classes"
         manifest="${build.home}/MANIFEST.MF"/>

  </target>

</project>
